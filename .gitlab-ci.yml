include:
  - file: /Scan/trivy.yml
    project: jitesoft/gitlab-ci-lib

stages:
  - pre
  - build
  - containerize
  - scan

check:
  stage: pre
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - touch version.txt
    - VERSION=$(wget -qO- https://github.com/memcached/memcached/releases | grep -oP '(?<=releases\/tag\/)(.*?)(?=\">)' | awk 'NR==1{print $1}')
    - |
      if [ "${VERSION}" != "$(cat version.txt)" ]; then
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${VERSION}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${VERSION}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi

download:
  stage: pre
  rules:
    - if: "$BUILD && $VERSION"
      when: always
    - when: never
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - curl -L https://github.com/memcached/memcached/archive/${VERSION}.tar.gz -o memcached.tar.gz
  artifacts:
    expire_in: 1 day
    paths:
      - memcached.tar.gz

.build:
  rules:
    - if: "$BUILD && $VERSION"
      when: on_success
    - when: never
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc/buildbase:latest
  needs:
    - download
  before_script:
    - apk add --no-cache build-base autoconf automake git libevent-dev openssl-dev cyrus-sasl-dev
    - mkdir src
  script:
    - tar -xzf memcached.tar.gz -C src --strip-components=1
    - cd src
    - ./autogen.sh || echo "Autogen failed."
    - |
      ./configure \
        --quiet \
        --enable-sasl \
        --enable-64bit \
        --enable-seccomp \
        --disable-coverage \
        --disable-docs
    - make -j4
    - make install
    - memcached --version
    - cd ..
    - $(cd /usr/local && tar -czf /tmp/memcached.tar.gz *)
    - mkdir bin
    - mv /tmp/memcached.tar.gz bin/${ARCH}.tar.gz
  artifacts:
    paths:
      - bin/${ARCH}.tar.gz
    expire_in: 1 day

build.amd:
  tags:
    - "native-amd64"
  extends: .build
  variables:
    ARCH: amd64

build.arm:
  tags:
    - "native-aarch64"
  extends: .build
  variables:
    ARCH: arm64

containerize:
  rules:
    - if: "$BUILD && $VERSION"
      when: on_success
    - when: never
  needs:
    - job: build.arm
      artifacts: true
    - job: build.amd
      artifacts: true
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - cp entrypoint bin/entrypoint
    - TAG_LIST=$(helper "jitesoft/memcached,${CI_REGISTRY_IMAGE}" "latest,${VERSION}")
    - docker buildx build --platform "linux/amd64,linux/arm64" --progress plain --push ${TAG_LIST} --build-arg VERSION_NUMBER=${VERSION} .
  tags: [ buildx, protected ]

scan:
  extends: .container_scanning
  stage: scan
  rules:
    - if: "$SCAN"
      when: always
    - if: "$VERSION"
      when: on_success
    - when: never
  variables:
    GIT_STRATEGY: none
  before_script:
    - |
      if [ -n "${VERSION}" ]; then
        SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}:${VERSION}"
      else
        SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}:latest"
      fi
